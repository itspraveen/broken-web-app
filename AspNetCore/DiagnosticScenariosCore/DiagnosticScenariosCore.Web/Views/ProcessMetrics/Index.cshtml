@{
    ViewData["Title"] = "Process Metrics";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Process Metrics</h1>
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Current Process Information</h5>
                    <button class="btn btn-primary btn-sm" onclick="refreshMetrics()">Refresh</button>
                </div>
                <div class="card-body">
                    <div id="metrics-container">
                        <div class="text-center">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function refreshMetrics() {
        const container = document.getElementById('metrics-container');
        container.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
        
        fetch('/ProcessMetrics/api')
            .then(response => response.json())
            .then(data => {
                displayMetrics(data);
            })
            .catch(error => {
                container.innerHTML = `<div class="alert alert-danger">Error loading metrics: ${error.message}</div>`;
            });
    }

    function displayMetrics(data) {
        const container = document.getElementById('metrics-container');
        
        const formatBytes = (bytes) => {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        };

        const formatTime = (minutes) => {
            const hours = Math.floor(minutes / 60);
            const mins = Math.floor(minutes % 60);
            return `${hours}h ${mins}m`;
        };

        container.innerHTML = `
            <div class="row">
                <div class="col-md-6">
                    <h6>Basic Information</h6>
                    <table class="table table-sm">
                        <tr><td><strong>Process ID:</strong></td><td>${data.processId}</td></tr>
                        <tr><td><strong>Process Name:</strong></td><td>${data.processName}</td></tr>
                        <tr><td><strong>Machine Name:</strong></td><td>${data.machineName}</td></tr>
                        <tr><td><strong>Uptime:</strong></td><td>${formatTime(data.processUptimeMinutes)}</td></tr>
                        <tr><td><strong>Timestamp:</strong></td><td>${new Date(data.timestamp).toLocaleString()}</td></tr>
                    </table>
                </div>
                <div class="col-md-6">
                    <h6>Performance Metrics</h6>
                    <table class="table table-sm">
                        <tr><td><strong>CPU Time:</strong></td><td>${data.cpuTime.toFixed(2)} seconds</td></tr>
                        <tr><td><strong>Private Bytes:</strong></td><td>${formatBytes(data.privateBytes)}</td></tr>
                        <tr><td><strong>Working Set:</strong></td><td>${formatBytes(data.workingSet)}</td></tr>
                        <tr><td><strong>Thread Count:</strong></td><td>${data.threadCount}</td></tr>
                        <tr><td><strong>Handle Count:</strong></td><td>${data.handleCount}</td></tr>
                    </table>
                </div>
            </div>
            
            <div class="row mt-3">
                <div class="col-12">
                    <h6>Service Point Connections</h6>
                    <table class="table table-sm">
                        <tr><td><strong>Service Point Count:</strong></td><td>${data.servicePointConnections.servicePointCount}</td></tr>
                        <tr><td><strong>Default Connection Limit:</strong></td><td>${data.servicePointConnections.defaultConnectionLimit}</td></tr>
                    </table>
                    
                    ${data.servicePointConnections.servicePoints.length > 0 ? `
                        <div class="table-responsive">
                            <table class="table table-striped table-sm">
                                <thead>
                                    <tr>
                                        <th>Address</th>
                                        <th>Connection Limit</th>
                                        <th>Current Connections</th>
                                        <th>Connection Groups</th>
                                        <th>Total Connections</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${data.servicePointConnections.servicePoints.map(sp => `
                                        <tr>
                                            <td>${sp.address}</td>
                                            <td>${sp.connectionLimit}</td>
                                            <td>${sp.currentConnections}</td>
                                            <td>${sp.connectionGroupCount}</td>
                                            <td>${sp.totalConnections}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        </div>
                    ` : '<p class="text-muted">No service points found.</p>'}
                </div>
            </div>
        `;
    }

    // Load metrics on page load
    document.addEventListener('DOMContentLoaded', function() {
        refreshMetrics();
    });

    // Auto-refresh every 30 seconds
    setInterval(refreshMetrics, 30000);
</script> 