# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Deploy - Hang on Startup App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  APP_SERVICE_NAME: broken-webapp-aspnet-hangonstartup-${{ github.actor }}
  WEBAPP_URL: https://broken-webapp-aspnet-hangonstartup-${{ github.actor }}.azurewebsites.net
  CONFIGURATION: 'Release'
  SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTIONID }}
  RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup MSBuild path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    - name: Restore NuGet packages
      run: msbuild DiagnosticScenarios.sln /t:restore /p:RestorePackagesConfig=true

    - name: Publish to folder
      run: |
        Write-Host "Building solution..."
        msbuild DiagnosticScenarios.sln /p:Configuration=Release /p:Platform="Any CPU" /t:Build /v:m /restore
        Write-Host "Publishing web project..."
        msbuild DiagnosticScenarios.Web\DiagnosticScenarios.Web.csproj /p:Configuration=Release /p:Platform="Any CPU" /t:pipelinePreDeployCopyAllFilesToOneFolder /p:_PackageTempDir="\published\"

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: ASP-app
        path: '/published/**'

  deploy:
    runs-on: windows-latest
    needs: build
    
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
    - uses: actions/checkout@v4
    
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: ASP-app
    
    - name: Login to Azure
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.MANAGED_IDENTITY_CLIENTID }}
        tenant-id: ${{ secrets.TENANTID }}
        subscription-id: ${{ secrets.SUBSCRIPTIONID }}

    - name: List folder structure for debugging
      run: Get-ChildItem -Recurse

    - name: Deploy Bicep (Web App & App Service Plan)
      uses: azure/arm-deploy@v1
      with:
        subscriptionId: ${{ env.SUBSCRIPTION_ID }}
        resourceGroupName: ${{ env.RESOURCE_GROUP_NAME }}
        template: ./infra/hangonstartup.bicep
        parameters: appServiceName=${{ env.APP_SERVICE_NAME }}

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v3
      with:
        app-name: '${{ env.APP_SERVICE_NAME }}'
        slot-name: 'Production'
        package: .

  test:
    runs-on: windows-latest
    needs: deploy
    
    steps:
    - uses: actions/checkout@v4
    - name: Setup MSBuild path
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.5

    - name: Restore NuGet packages
      run: msbuild DiagnosticScenarios.sln /t:restore /p:RestorePackagesConfig=true

    - name: Build Solution in Release Mode
      run: |
        Write-Host "Building solution in Release mode..."
        msbuild DiagnosticScenarios.sln /p:Configuration=Release /p:Platform="Any CPU" /t:Build /v:m /restore /p:OutputPath="bin\Release"

    - name: Install NUnit Console Runner
      run: |
        Write-Host "Installing NUnit Console Runner..."
        nuget install NUnit.ConsoleRunner -Version 3.16.3 -OutputDirectory tools

    - name: Run Tests
      run: |
        Write-Host "Running Hang on Startup tests..."
        $nunitPath = Join-Path $env:GITHUB_WORKSPACE "tools\NUnit.ConsoleRunner.3.16.3\tools\nunit3-console.exe"
        $testDll = Join-Path $env:GITHUB_WORKSPACE "DiagnosticScenarios.Tests\bin\Release\DiagnosticScenarios.Tests.dll"
        & $nunitPath $testDll --framework=net-4.8 --where "cat==HangOnStartup"
      env:
        WEBAPP_URL: ${{ env.WEBAPP_URL }}
        RUN_SPECIALIZED_TESTS: HangOnStartup 


